// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Organization {
  id        String   @id @default(uuid())
  name      String
  email     String
  slug      String   @unique
  phoneNumber String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  users     User[]
  plans     Plan[]
  tickets   Ticket[] // Adicionado o campo de relação para Ticket
}

model User {
  id             String        @id @default(uuid())
  name           String
  email          String        @unique
  role           Role          @default(CLIENT)
  tickets        Ticket[]      @relation("CreatedTickets")
  enable         Boolean?      @default(false)
  assigned       Ticket[]      @relation("AssignedTickets")
  comments       Comment[]
  password       String
  Organization   Organization? @relation(fields: [organizationId], references: [id])
  organizationId String?
}

model TicketAccessToken {
  id        String    @id @default(uuid())
  ticketId  String
  ticket    Ticket    @relation(fields: [ticketId], references: [id])
  token     String    @unique
  createdAt DateTime  @default(now())
  expiresAt DateTime? // opcional: pode deixar nulo para acesso eterno
}

model Plan {
  id          String   @id @default(uuid())
  name        String
  description String
  price       Float
  duration    Int // Duração em dias
  userLimit   Int // Limite de usuários permitidos no plano
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  Organization   Organization? @relation(fields: [organizationId], references: [id])
  organizationId String?
}

model Ticket {
  id          String         @id @default(uuid())
  title       String
  description String
  status      TicketStatus   @default(OPEN)
  priority    TicketPriority
  slaDeadline DateTime
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  createdById String?
  createdBy   User?   @relation("CreatedTickets", fields: [createdById], references: [id])

  assignedToId String?
  assignedTo   User?   @relation("AssignedTickets", fields: [assignedToId], references: [id])

  comments           Comment[]
  ticketAccessTokens TicketAccessToken[] // Adicionado o campo de relação para TicketAccessToken

  externalName   String?
  externalEmail  String?
  organizationId String?
  organization   Organization? @relation(fields: [organizationId], references: [id])
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())
  ticketId  String
  ticket    Ticket   @relation(fields: [ticketId], references: [id])
  authorId  String?
  author    User?     @relation(fields: [authorId], references: [id])

  externalName  String?
  externalEmail String?
}

enum Role {
  CLIENT
  AGENT
  ADMIN
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  CLOSED
}

enum TicketPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}
