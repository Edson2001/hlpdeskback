// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Organization {
  id               String             @id @default(uuid())
  name             String
  email            String
  slug             String             @unique
  phoneNumber      String
  isActive         Boolean            @default(true)
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  users            User[]
  plans            Plan[]
  tickets          Ticket[] // Adicionado o campo de rela√ß√£o para Ticket
  widgetConfig     WidgetConfig[]
  OrganizationPlan OrganizationPlan[]
  payments         Payment[]
}

model WidgetConfig {
  id    String       @id @default(cuid())
  orgId String       @unique
  org   Organization @relation(fields: [orgId], references: [id])

  buttonText     String?  @default("üí¨ Suporte")
  modalTitle     String?  @default("Reportar um Problema")
  buttonColor    String?  @default("#1f2937")
  headerColor    String?  @default("#1f2937")
  logoUrl        String?
  showPriority   Boolean  @default(true)
  theme          String?  @default("light") // "light" ou "dark"
  successMessage String?  @default("Seu ticket foi registrado com sucesso!")
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model User {
  id             String        @id @default(uuid())
  name           String
  email          String        @unique
  role           Role          @default(CLIENT)
  tickets        Ticket[]      @relation("CreatedTickets")
  enable         Boolean?      @default(false)
  assigned       Ticket[]      @relation("AssignedTickets")
  comments       Comment[]
  password       String
  Organization   Organization? @relation(fields: [organizationId], references: [id])
  organizationId String?
}

model TicketAccessToken {
  id        String    @id @default(uuid())
  ticketId  String
  ticket    Ticket    @relation(fields: [ticketId], references: [id])
  token     String    @unique
  createdAt DateTime  @default(now())
  expiresAt DateTime? // opcional: pode deixar nulo para acesso eterno
}

model Plan {
  id             String   @id @default(uuid())
  title          String
  monthlyPrice   Float
  annualPrice    Float
  durationMonths Int      @default(12) // Dura√ß√£o padr√£o em meses (ex: 12 = 1 ano)
  description    String
  features       String[]
  buttonText     String
  highlight      Boolean  @default(false)
  isActive       Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Remova a rela√ß√£o direta com Organization
  organizationPlans OrganizationPlan[]
  Organization      Organization?      @relation(fields: [organizationId], references: [id])
  organizationId    String?
  payments          Payment[]
}

model OrganizationPlan {
  id             String       @id @default(uuid())
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String
  plan           Plan         @relation(fields: [planId], references: [id])
  planId         String
  startDate      DateTime     @default(now())
  expiresAt      DateTime // Data de expira√ß√£o espec√≠fica para cada organiza√ß√£o
  isActive       Boolean      @default(true)
  payment        Payment?     @relation(fields: [paymentId], references: [id])
  paymentId      String?      @unique

  // @@unique([organizationId, planId])
}

model Ticket {
  id          String         @id @default(uuid())
  title       String
  description String
  status      TicketStatus   @default(OPEN)
  priority    TicketPriority
  slaDeadline DateTime
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  createdById String?
  createdBy   User?   @relation("CreatedTickets", fields: [createdById], references: [id])

  assignedToId String?
  assignedTo   User?   @relation("AssignedTickets", fields: [assignedToId], references: [id])

  comments           Comment[]
  ticketAccessTokens TicketAccessToken[] // Adicionado o campo de rela√ß√£o para TicketAccessToken

  externalName   String?
  externalEmail  String?
  organizationId String?
  organization   Organization? @relation(fields: [organizationId], references: [id])
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())
  ticketId  String
  ticket    Ticket   @relation(fields: [ticketId], references: [id])
  authorId  String?
  author    User?    @relation(fields: [authorId], references: [id])

  externalName  String?
  externalEmail String?
}

model Payment {
  id               String       @id @default(uuid())
  paymentReference String       @unique // Refer√™ncia √∫nica do gateway (ex: "PLAN_abc123_5252")
  organization     Organization @relation(fields: [organizationId], references: [id])
  organizationId   String
  plan             Plan         @relation(fields: [planId], references: [id])
  planId           String
  status           String       @default("pending") // "pending", "completed", "failed"
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt

  // Vincule ao OrganizationPlan (opcional)
  organizationPlan OrganizationPlan?
}

enum Role {
  CLIENT
  AGENT
  ADMIN
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  CLOSED
}

enum TicketPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}
